（一）基本定义
线程：
    一个进程可能需要同时做几件事情，此时将单件事情定义为一个线程，一个进程中就包含了多个线程。多个线程之间协同工作。
    一个进程中至少有一个线程。

    关于线程和进程的关系，有一个很好的比喻：
        计算机就像一家公司，多个进程就是这家公司中的多个部门，
        各个部门（进程）之间需要合理分配软硬件资源，协同工作才能使公司（计算机）正常运行，
        而每个部门（进程）中真正在工作的是每个部门的员工（线程），
        一个部门（进程）有多个员工（线程），不同员工承担不同的工作职责。员工之间也需要协同工作。

    计算机的执行单位以线程为单位。计算机的最小可执行单位是线程。
    进程是资源分配的基本单位。线程是可执行的基本单位，是可被调度的基本单位。
    线程不可以自己独立拥有资源。线程的执行，必须依赖于所属进程中的资源。

    线程又分为用户级线程和内核级线程（了解）
            用户级线程：对于程序员来说的，这样的线程完全被程序员控制执行，调度。
            内核级线程：对于计算机内核来说的，这样的线程完全被内核控制调度。

线程和进程的组成区别
    进程由 代码段  数据段  PCB组成（process control block）
    线程由 代码段  数据段  TCB组成（thread control block）

线程和进程的比较
 thread - 线程
          import thread 操作线程的模块（旧模块，舍弃）
          import threading 用这个去操作线程（推荐）

          进程和线程的区别？
                进程：是资源分配的基本单位
                线程：是最小的执行单位，线程不能独立拥有资源，必须依赖于所属进程。
                当计算密集时，多进程比较好。IO密集时，使用多线程。

         (1) cpu切换进程要比cpu切换线程慢很多，所以在python中，如果IO操作过多的话，使用多线程最好

         (2) 在同一个进程内，所有线程共享这个进程的pid，也就是说所有线程共享所属进程的所有资源和内存地址。

         (3) 在同一个进程内，所有线程共享该进程中的全局变量

         (4)线程被称作轻量级的进程。
            GIL：全局解释锁（只有Cpython解释器才有）
                 对于线程来说，因为有了GIL，所以没有真正的并行
                 因为有GIL锁的存在，在Cpython中，没有真正的线程并行。但是有真正的多进程并行
             当你的任务是计算密集的情况下，使用多进程好
             总结：在CPython中，IO密集时用多线程，计算密集时用多进程

        （5）关于守护线程和守护进程的事情（注意：代码执行结束并不代表程序结束）
            守护进程：要么自己正常结束，要么根据父进程的代码执行结束而结束
            守护线程：要么自己正常结束，要么根据父线程的执行结束而结束

        （6）最重要的一点：线程和进程除了所用模块的名称不同之外，模块中的方法名称及其使用方法也基本一样!

（二）线程的使用方法
        （1）锁机制
             递归锁
                 RLock()    可以有无止尽的锁，但是会有一把万能钥匙
             互斥锁：
                 Lock()     一把钥匙配一把锁
             GIL：全局解释器锁
                锁的是线程，是CPython解释器上的一个锁，锁的是线程，意思是在同一时间只允许一个线程访问cpu
        （2） 信号量：
            from threading import Semaphore
            去看多进程的信号量

        （3） 事件
            from threading import Event
            去看多进程的事件机制

        （4） 条件
            from threading import Condition
            条件是让程序员自行去调度线程的一个机制
            # Condition涉及4个方法
            # acquire()
            # release()
            # wait()    是指让线程阻塞住
            # notify(int)  是指给wait发一个信号，让wait变成不阻塞
            #     int是指，你要给多少给wait发信号

        （5） 定时器
            from threading import Timer
                # Timer(time,func)
                # time：睡眠的时间，以秒为单位
                # func：睡眠时间之后，需要执行的任务


今天的面试题：
    进程和线程的区别？
    你认为什么时候用多线程好？什么时候用多进程好？
    给你一个任务场景，让你去分析，如果让你去研发，你是选择用多线程还是多进程？
    解释一下GIL锁？


