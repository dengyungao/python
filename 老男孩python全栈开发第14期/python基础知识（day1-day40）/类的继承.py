"""
类的继承
通过子类的类名以及子类的实例化对象均可直接使用“.”访问父类所有内容。
如果只想执行父类的方法，则子类中不要定义与父类同名的方法（因为子类对象调用某一方法时的查找顺序为：先在子类中找方法，如果没找到则再到父类中找）。
如果只想执行子类的方法则直接在子类中定义这个方法即可。
如果想同时执行子类和父类中的方法，两种方法：
   1）Animal.__init__(self,age,name)
   2）super().__init__(age,name)

类的私有成员：静态私有字段，静态私有方法，静态私有对象属性
             只能在自己类中访问，不能在类的外部或者子类中访问。
 
类中的标注
@property标注： 将类的方法伪装成类的属性，让程序逻辑更加合理。使得在调用方法时不用加括号，但在代码的级别上没有本质的提升。
                使用场景：当某个属性需要通过某个公式计算得到时。
                示例：
                class Circle():
                	def __init__(self, r):
                		self.r = r
                	@property
                	def area(self):#函数伪装成属性
                		return 3.14 * self.r ** 2
                c = Circle(4)
                print(c.area)#使用调用属性的格式调用方法

@classmethod：  类的方法，不同于对象的方法，使用类名（推荐）或类的对象均可调用。
                使用场景：某个方法不需要对象的参与时，如修改类的静态变量（非对象属性）时。
@staticmethod： 类的静态方法，使用类名或类的对象均可调用。
                作用：丰富类的功能，增加类的复用性，使用较少。
"""